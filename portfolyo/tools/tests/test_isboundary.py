from typing import Iterable

import pandas as pd
import pytest
from portfolyo import tools


@pytest.mark.parametrize("tz", [None, "Europe/Berlin", "Asia/Kolkata"])
@pytest.mark.parametrize(
    ("ts", "freq", "offset_hours", "expected"),
    [
        ("2020", "15T", 0, True),
        ("2020", "15T", 6, True),
        ("2020", "H", 0, True),
        ("2020", "H", 6, True),
        ("2020", "D", 0, True),
        ("2020", "D", 6, False),
        ("2020", "MS", 0, True),
        ("2020", "MS", 6, False),
        ("2020", "AS", 0, True),
        ("2020", "AS", 6, False),
        ("2020-04-01", "15T", 0, True),
        ("2020-04-01", "15T", 6, True),
        ("2020-04-01", "H", 0, True),
        ("2020-04-01", "H", 6, True),
        ("2020-04-01", "D", 0, True),
        ("2020-04-01", "D", 6, False),
        ("2020-04-01", "MS", 0, True),
        ("2020-04-01", "MS", 6, False),
        ("2020-04-01", "AS", 0, False),
        ("2020-04-01", "AS", 6, False),
        ("2020-01-01 15:00", "15T", 0, True),
        ("2020-01-01 15:00", "15T", 6, True),
        ("2020-01-01 15:00", "H", 0, True),
        ("2020-01-01 15:00", "H", 6, True),
        ("2020-01-01 15:00", "D", 0, False),
        ("2020-01-01 15:00", "D", 6, False),
        ("2020-01-01 15:00", "MS", 0, False),
        ("2020-01-01 15:00", "MS", 6, False),
        ("2020-01-01 15:00", "AS", 0, False),
        ("2020-01-01 15:00", "AS", 6, False),
        ("2020-01-01 15:45", "15T", 0, True),
        ("2020-01-01 15:45", "15T", 6, True),
        ("2020-01-01 15:45", "H", 0, False),
        ("2020-01-01 15:45", "H", 6, False),
        ("2020-01-01 15:45", "D", 0, False),
        ("2020-01-01 15:45", "D", 6, False),
        ("2020-01-01 15:45", "MS", 0, False),
        ("2020-01-01 15:45", "MS", 6, False),
        ("2020-01-01 15:45", "AS", 0, False),
        ("2020-01-01 15:45", "AS", 6, False),
        ("2020-01-01 06:00", "15T", 0, True),
        ("2020-01-01 06:00", "15T", 6, True),
        ("2020-01-01 06:00", "H", 0, True),
        ("2020-01-01 06:00", "H", 6, True),
        ("2020-01-01 06:00", "D", 0, False),
        ("2020-01-01 06:00", "D", 6, True),
        ("2020-01-01 06:00", "MS", 0, False),
        ("2020-01-01 06:00", "MS", 6, True),
        ("2020-01-01 06:00", "AS", 0, False),
        ("2020-01-01 06:00", "AS", 6, True),
        ("2020-04-21 06:00", "15T", 0, True),
        ("2020-04-21 06:00", "15T", 6, True),
        ("2020-04-21 06:00", "H", 0, True),
        ("2020-04-21 06:00", "H", 6, True),
        ("2020-04-21 06:00", "D", 0, False),
        ("2020-04-21 06:00", "D", 6, True),
        ("2020-04-21 06:00", "MS", 0, False),
        ("2020-04-21 06:00", "MS", 6, False),
        ("2020-04-21 06:00", "AS", 0, False),
        ("2020-04-21 06:00", "AS", 6, False),
    ],
)
def test_isboundary_stamp(
    ts: str, tz: str, freq: str, offset_hours: int, expected: bool
):
    """Test if boundary timestamps are correctly identified."""
    ts = pd.Timestamp(ts, tz=tz)
    assert tools.isboundary.stamp(ts, freq, offset_hours) == expected


@pytest.mark.parametrize("tz", [None, "Europe/Berlin", "Asia/Kolkata"])
@pytest.mark.parametrize(
    ("tss", "freq", "offset_hours", "expected"),
    [
        (["2020", "2021"], "15T", 0, True),
        (["2020", "2021"], "15T", 6, True),
        (["2020", "2021"], "H", 0, True),
        (["2020", "2021"], "H", 6, True),
        (["2020", "2021"], "D", 0, True),
        (["2020", "2021"], "D", 6, False),
        (["2020", "2021"], "MS", 0, True),
        (["2020", "2021"], "MS", 6, False),
        (["2020", "2021"], "AS", 0, True),
        (["2020", "2021"], "AS", 6, False),
        (["2020-04-01", "2021"], "15T", 0, True),
        (["2020-04-01", "2021"], "15T", 6, True),
        (["2020-04-01", "2021"], "H", 0, True),
        (["2020-04-01", "2021"], "H", 6, True),
        (["2020-04-01", "2021"], "D", 0, True),
        (["2020-04-01", "2021"], "D", 6, False),
        (["2020-04-01", "2021"], "MS", 0, True),
        (["2020-04-01", "2021"], "MS", 6, False),
        (["2020-04-01", "2021"], "AS", 0, False),
        (["2020-04-01", "2021"], "AS", 6, False),
        (["2020-01-01 15:00", "2021"], "15T", 0, True),
        (["2020-01-01 15:00", "2021"], "15T", 6, True),
        (["2020-01-01 15:00", "2021"], "H", 0, True),
        (["2020-01-01 15:00", "2021"], "H", 6, True),
        (["2020-01-01 15:00", "2021"], "D", 0, False),
        (["2020-01-01 15:00", "2021"], "D", 6, False),
        (["2020-01-01 15:00", "2021"], "MS", 0, False),
        (["2020-01-01 15:00", "2021"], "MS", 6, False),
        (["2020-01-01 15:00", "2021"], "AS", 0, False),
        (["2020-01-01 15:00", "2021"], "AS", 6, False),
        (["2020-01-01 15:45", "2021"], "15T", 0, True),
        (["2020-01-01 15:45", "2021"], "15T", 6, True),
        (["2020-01-01 15:45", "2021"], "H", 0, False),
        (["2020-01-01 15:45", "2021"], "H", 6, False),
        (["2020-01-01 15:45", "2021"], "D", 0, False),
        (["2020-01-01 15:45", "2021"], "D", 6, False),
        (["2020-01-01 15:45", "2021"], "MS", 0, False),
        (["2020-01-01 15:45", "2021"], "MS", 6, False),
        (["2020-01-01 15:45", "2021"], "AS", 0, False),
        (["2020-01-01 15:45", "2021"], "AS", 6, False),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "15T", 0, True),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "15T", 6, True),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "H", 0, True),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "H", 6, True),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "D", 0, False),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "D", 6, True),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "MS", 0, False),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "MS", 6, True),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "AS", 0, False),
        (["2020-01-01 06:00", "2021-01-01 06:00"], "AS", 6, True),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "15T", 0, True),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "15T", 6, True),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "H", 0, True),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "H", 6, True),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "D", 0, False),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "D", 6, True),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "MS", 0, False),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "MS", 6, False),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "AS", 0, False),
        (["2020-04-21 06:00", "2021-01-01 06:00"], "AS", 6, False),
    ],
)
def test_isboundary_index(
    tss: Iterable[str], tz: str, freq: str, offset_hours: int, expected: bool
):
    """Test if boundary timestamps are correctly identified."""
    i = pd.DatetimeIndex([pd.Timestamp(ts, tz=tz) for ts in tss])
    assert tools.isboundary.index(i, freq, offset_hours) == expected
