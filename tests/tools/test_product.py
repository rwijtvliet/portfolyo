import datetime as dt

import pandas as pd
import pytest

from portfolyo import tools


@pytest.mark.parametrize(
    ("ts_trade_date", "period_type", "period_start", "expected_left"),
    [
        ("2020-1-1", "d", 0, "2020-1-1"),
        ("2020-1-1", "m", 0, "2020-1-1"),
        ("2020-1-1", "q", 0, "2020-1-1"),
        ("2020-1-1", "s", 0, "2019-10-1"),
        ("2020-1-1", "y", 0, "2020-1-1"),
        ("2020-1-1", "d", 1, "2020-1-2"),
        ("2020-1-1", "m", 1, "2020-2-1"),
        ("2020-1-1", "q", 1, "2020-4-1"),
        ("2020-1-1", "s", 1, "2020-4-1"),
        ("2020-1-1", "y", 1, "2021-1-1"),
        ("2020-1-1", "d", 3, "2020-1-4"),
        ("2020-1-1", "m", 3, "2020-4-1"),
        ("2020-1-1", "q", 3, "2020-10-1"),
        ("2020-1-1", "s", 3, "2021-4-1"),
        ("2020-1-1", "y", 3, "2023-1-1"),
        ("2020-1-31", "d", 0, "2020-1-31"),
        ("2020-1-31", "m", 0, "2020-1-1"),
        ("2020-1-31", "q", 0, "2020-1-1"),
        ("2020-1-31", "s", 0, "2019-10-1"),
        ("2020-1-31", "y", 0, "2020-1-1"),
        ("2020-1-31", "d", 1, "2020-2-1"),
        ("2020-1-31", "m", 1, "2020-2-1"),
        ("2020-1-31", "q", 1, "2020-4-1"),
        ("2020-1-31", "s", 1, "2020-4-1"),
        ("2020-1-31", "y", 1, "2021-1-1"),
        ("2020-1-31", "d", 3, "2020-2-3"),
        ("2020-1-31", "m", 3, "2020-4-1"),
        ("2020-1-31", "q", 3, "2020-10-1"),
        ("2020-1-31", "s", 3, "2021-4-1"),
        ("2020-1-31", "y", 3, "2023-1-1"),
        ("2020-2-14", "s", 0, "2019-10-1"),
        ("2020-3-14", "s", 0, "2019-10-1"),
        ("2020-4-14", "s", 0, "2020-4-1"),
        ("2020-5-14", "s", 0, "2020-4-1"),
        ("2020-6-14", "s", 0, "2020-4-1"),
        ("2020-7-14", "s", 0, "2020-4-1"),
        ("2020-8-14", "s", 0, "2020-4-1"),
        ("2020-9-14", "s", 0, "2020-4-1"),
        ("2020-10-14", "s", 0, "2020-10-1"),
        ("2020-11-14", "s", 0, "2020-10-1"),
        ("2020-12-14", "s", 0, "2020-10-1"),
        ("2020-2-14", "s", 1, "2020-4-1"),
        ("2020-3-14", "s", 1, "2020-4-1"),
        ("2020-4-14", "s", 1, "2020-10-1"),
        ("2020-5-14", "s", 1, "2020-10-1"),
        ("2020-6-14", "s", 1, "2020-10-1"),
        ("2020-7-14", "s", 1, "2020-10-1"),
        ("2020-8-14", "s", 1, "2020-10-1"),
        ("2020-9-14", "s", 1, "2020-10-1"),
        ("2020-10-14", "s", 1, "2021-4-1"),
        ("2020-11-14", "s", 1, "2021-4-1"),
        ("2020-12-14", "s", 1, "2021-4-1"),
        ("2020-2-14", "s", 3, "2021-4-1"),
        ("2020-3-14", "s", 3, "2021-4-1"),
        ("2020-4-14", "s", 3, "2021-10-1"),
        ("2020-5-14", "s", 3, "2021-10-1"),
        ("2020-6-14", "s", 3, "2021-10-1"),
        ("2020-7-14", "s", 3, "2021-10-1"),
        ("2020-8-14", "s", 3, "2021-10-1"),
        ("2020-9-14", "s", 3, "2021-10-1"),
        ("2020-10-14", "s", 3, "2022-4-1"),
        ("2020-11-14", "s", 3, "2022-4-1"),
        ("2020-12-14", "s", 3, "2022-4-1"),
    ],
)
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
@pytest.mark.parametrize("starttime", ["00:00", "06:00"])
def test_deliveryperiod(
    ts_trade_date: str,
    period_type: str,
    period_start: str,
    tz: str,
    expected_left: str,
    starttime: str,
):
    ts_trade = pd.Timestamp(f"{ts_trade_date} 12:00", tz=tz)
    if starttime == "06:00":
        start_of_day = dt.time(hour=6)
    else:
        start_of_day = dt.time(hour=0)
    expected_left = pd.Timestamp(f"{expected_left} {starttime}", tz=tz)
    ts_deliv = tools.product.delivery_period(
        ts_trade, period_type, period_start, start_of_day
    )
    assert ts_deliv[0] == expected_left
    try:
        add = {"m": 1, "q": 3, "s": 6, "y": 12}[period_type]
        assert ts_deliv[1] == expected_left + pd.offsets.MonthBegin(add)
    except KeyError:
        assert ts_deliv[1] == expected_left + dt.timedelta(1)
