from portfolyo import toolsb
import pytest
import pandas as pd

LEFT_FREQ_PERIODS_RIGHT_DURATION = [
    ("2020", "min", 5 * 24 * 60, "2020-01-01 00:01", 1 / 60),
    ("2020", "5min", 5 * 24 * 12, "2020-01-01 00:05", 5 / 60),
    ("2020", "15min", 5 * 24 * 4, "2020-01-01 00:15", 15 / 60),
    ("2020", "h", 5 * 24, "2020-01-01 01:00", 1),
    ("2020", "D", 5, "2020-01-02", 24),
    ("2020", "MS", 3, "2020-02", [31 * 24, 29 * 24, 31 * 24]),
    ("2020", "QS-JAN", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
    ("2020", "QS-APR", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
    ("2020", "QS-JUL", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
    ("2020", "QS-OCT", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
    ("2020", "YS", 3, "2021", [8784, 8760, 8760]),
    ("2020-05", "min", 5 * 24 * 60, "2020-05-01 00:01", 1 / 60),
    ("2020-05", "5min", 5 * 24 * 12, "2020-05-01 00:05", 5 / 60),
    ("2020-05", "15min", 5 * 24 * 4, "2020-05-01 00:15", 15 / 60),
    ("2020-05", "h", 5 * 24, "2020-05-01 01:00", 1),
    ("2020-05", "D", 5, "2020-05-02", 24),
    ("2020-05", "MS", 3, "2020-06", [31 * 24, 30 * 24, 31 * 24]),
    ("2020-05", "QS-FEB", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
    ("2020-05", "QS-MAY", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
    ("2020-05", "QS-AUG", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
    ("2020-05", "QS-NOV", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
    ("2020-05", "YS-MAY", 3, "2021-05", [8760, 8760, 8760]),
    ("2020-04-21 15:00", "min", 5 * 24 * 60, "2020-04-21 15:01", 1 / 60),
    ("2020-04-21 15:00", "5min", 5 * 24 * 12, "2020-04-21 15:05", 5 / 60),
    ("2020-04-21 15:00", "15min", 5 * 24 * 4, "2020-04-21 15:15", 15 / 60),
    ("2020-04-21 15:00", "h", 5 * 24, "2020-04-21 16:00", 1),
]


@pytest.mark.parametrize(
    "idx,right",
    [
        (
            pd.date_range(left, freq=freq, periods=periods),
            pd.date_range(right, freq=freq, periods=periods),
        )
        for (left, freq, periods, right, _) in LEFT_FREQ_PERIODS_RIGHT_DURATION
    ],
)
def test_index_toright(idx, right):
    expected = pd.Series(right, idx)
    pd.testing.assert_series_equal(toolsb.index.to_right(idx), expected)


@pytest.mark.parametrize(
    "idx,durations",
    [
        (pd.date_range(left, freq=freq, periods=periods), durations)
        for (left, freq, periods, _, durations) in LEFT_FREQ_PERIODS_RIGHT_DURATION
    ],
)
def test_index_duration(idx, durations):
    expected = pd.Series(durations, idx, dtype="pint[h]")
    pd.testing.assert_series_equal(toolsb.index.duration(idx), expected)


LEFTRIGHT_FREQ_TRIMFREQ_TRIMMEDLEFTRIGHT = [
    # 2020
    # . 15min -> other
    (("2020", "2021"), "15min", "h", ("2020", "2021")),
    (("2020", "2021"), "15min", "MS", ("2020", "2021")),
    (("2020", "2021"), "15min", "QS-JAN", ("2020", "2021")),
    (("2020", "2021"), "15min", "QS-FEB", ("2020-02", "2020-11")),
    (("2020", "2021"), "15min", "YS-JAN", ("2020", "2021")),
    (("2020", "2021"), "15min", "YS-FEB", None),
    # . h -> other
    (("2020", "2021"), "h", "15min", ("2020", "2021")),
    (("2020", "2021"), "h", "MS", ("2020", "2021")),
    (("2020", "2021"), "h", "QS-JAN", ("2020", "2021")),
    (("2020", "2021"), "h", "QS-FEB", ("2020-02", "2020-11")),
    (("2020", "2021"), "h", "YS-JAN", ("2020", "2021")),
    (("2020", "2021"), "h", "YS-FEB", None),
    # . MS -> other
    (("2020", "2021"), "MS", "15min", ("2020", "2021")),
    (("2020", "2021"), "MS", "h", ("2020", "2021")),
    (("2020", "2021"), "MS", "QS-JAN", ("2020", "2021")),
    (("2020", "2021"), "MS", "QS-FEB", ("2020-02", "2020-11")),
    (("2020", "2021"), "MS", "YS-JAN", ("2020", "2021")),
    (("2020", "2021"), "MS", "YS-FEB", None),
    # . QS-JAN -> other
    (("2020", "2021"), "QS-JAN", "15min", ("2020", "2021")),
    (("2020", "2021"), "QS-JAN", "h", ("2020", "2021")),
    (("2020", "2021"), "QS-JAN", "MS", ("2020", "2021")),
    (("2020", "2021"), "QS-JAN", "QS-FEB", Exception),
    (("2020", "2021"), "QS-JAN", "YS-JAN", ("2020", "2021")),
    (("2020", "2021"), "QS-JAN", "YS-FEB", Exception),
    # . YS-JAN -> other
    (("2020", "2021"), "YS-JAN", "15min", ("2020", "2021")),
    (("2020", "2021"), "YS-JAN", "h", ("2020", "2021")),
    (("2020", "2021"), "YS-JAN", "MS", ("2020", "2021")),
    (("2020", "2021"), "YS-JAN", "QS-JAN", ("2020", "2021")),
    (("2020", "2021"), "YS-JAN", "QS-FEB", Exception),
    (("2020", "2021"), "YS-JAN", "YS-FEB", Exception),
    # 2020-02-01 06:00
    # . 15min -> other
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "15min",
        "h",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "15min",
        "MS",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "15min",
        "QS-JAN",
        ("2020-04-01 06:00", "2021-01-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "15min",
        "QS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "15min",
        "YS-JAN",
        None,
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "15min",
        "YS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    # . h -> other
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "h",
        "15min",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "h",
        "MS",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "h",
        "QS-JAN",
        ("2020-04-01 06:00", "2021-01-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "h",
        "QS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "h",
        "YS-JAN",
        None,
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "h",
        "YS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    # . MS -> other
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "MS",
        "15min",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "MS",
        "h",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "MS",
        "QS-JAN",
        ("2020-04-01 06:00", "2021-01-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "MS",
        "QS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "MS",
        "YS-JAN",
        None,
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "MS",
        "YS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    # . QS-FEB -> other
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "QS-FEB",
        "15min",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "QS-FEB",
        "h",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "QS-FEB",
        "MS",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "QS-FEB",
        "QS-JAN",
        Exception,
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "QS-FEB",
        "YS-JAN",
        Exception,
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "QS-FEB",
        "YS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    # . YS-FEB -> other
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "YS-FEB",
        "15min",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "YS-FEB",
        "h",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "YS-FEB",
        "MS",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "YS-FEB",
        "QS-JAN",
        Exception,
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "YS-FEB",
        "QS-FEB",
        ("2020-02-01 06:00", "2021-02-01 06:00"),
    ),
    (
        ("2020-02-01 06:00", "2021-02-01 06:00"),
        "YS-FEB",
        "YS-JAN",
        Exception,
    ),
    # 2020-04-21 15:00
    # . 15min -> other
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "15min",
        "h",
        ("2020-04-21 15:00", "2021-08-21 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "15min",
        "MS",
        ("2020-05-01 15:00", "2021-08-01 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "15min",
        "QS-JAN",
        ("2020-07-01 15:00", "2021-07-01 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "15min",
        "QS-FEB",
        ("2020-05-01 15:00", "2021-08-01 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "15min",
        "YS-JAN",
        None,
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "15min",
        "YS-FEB",
        None,
    ),
    # . h -> other
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "h",
        "15min",
        ("2020-04-21 15:00", "2021-08-21 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "h",
        "MS",
        ("2020-05-01 15:00", "2021-08-01 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "h",
        "QS-JAN",
        ("2020-07-01 15:00", "2021-07-01 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "h",
        "QS-FEB",
        ("2020-05-01 15:00", "2021-08-01 15:00"),
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "h",
        "YS-JAN",
        None,
    ),
    (
        ("2020-04-21 15:00", "2021-08-21 15:00"),
        "h",
        "YS-FEB",
        None,
    ),
]


@pytest.mark.parametrize(
    "idx,trimfreq,trimmed",
    [
        (
            pd.date_range(*leftright, freq=freq, inclusive="left"),
            trimfreq,
            pd.date_range(*trimmedleftright, freq=freq, inclusive="left"),
        )
        for (
            leftright,
            freq,
            trimfreq,
            trimmedleftright,
        ) in LEFTRIGHT_FREQ_TRIMFREQ_TRIMMEDLEFTRIGHT
        if trimmedleftright is not None and trimmedleftright is not Exception
    ],
)
def test_index_trim(idx, trimfreq, trimmed):
    pd.testing.assert_index_equal(toolsb.index.trim(idx, trimfreq), trimmed)


@pytest.mark.parametrize(
    "idx,trimfreq,trimmed",
    [
        (
            pd.date_range(*leftright, freq=freq, inclusive="left"),
            trimfreq,
            pd.DatetimeIndex([], freq=freq),
        )
        for (
            leftright,
            freq,
            trimfreq,
            trimmedleftright,
        ) in LEFTRIGHT_FREQ_TRIMFREQ_TRIMMEDLEFTRIGHT
        if trimmedleftright is None
    ],
)
def test_index_trim_empty(idx, trimfreq, trimmed):
    pd.testing.assert_index_equal(toolsb.index.trim(idx, trimfreq), trimmed)


@pytest.mark.parametrize(
    "idx,trimfreq",
    [
        (pd.date_range(*leftright, freq=freq, inclusive="left"), trimfreq)
        for (
            leftright,
            freq,
            trimfreq,
            trimmedleftright,
        ) in LEFTRIGHT_FREQ_TRIMFREQ_TRIMMEDLEFTRIGHT
        if trimmedleftright is Exception
    ],
)
def test_index_trim_error(idx, trimfreq):
    with pytest.raises(ValueError):
        toolsb.index.trim(idx, trimfreq)


# DATE1_FREQ1_DATE2_FREQ2_INTRSDATE = [
#     # startdate and freq of index1, startdate and freq of index2, startdate of intersection (if possible).
#     ("2020", "min", "2020", "5min", "2020"),
#     ('2020', 'min', '2020-01-20', '5min', '2020-01-20'),
#     ('2020', 'min', '2020-01-20', '5min', '2020-01-20'),
# ]
# LEFT_FREQ_PERIODS_RIGHT_DURATION = [
#     ("2020", "min", 5 * 24 * 60, "2020-01-01 00:01", 1 / 60),
#     ("2020", "5min", 5 * 24 * 12, "2020-01-01 00:05", 5 / 60),
#     ("2020", "15min", 5 * 24 * 4, "2020-01-01 00:15", 15 / 60),
#     ("2020", "h", 5 * 24, "2020-01-01 01:00", 1),
#     ("2020", "D", 5, "2020-01-02", 24),
#     ("2020", "MS", 3, "2020-02", [31 * 24, 29 * 24, 31 * 24]),
#     ("2020", "QS-JAN", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
#     ("2020", "QS-APR", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
#     ("2020", "QS-JUL", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
#     ("2020", "QS-OCT", 3, "2020-04", [91 * 24, 91 * 24, 92 * 24]),
#     ("2020", "YS", 3, "2021", [8784, 8760, 8760]),
#     ("2020-05", "min", 5 * 24 * 60, "2020-05-01 00:01", 1 / 60),
#     ("2020-05", "5min", 5 * 24 * 12, "2020-05-01 00:05", 5 / 60),
#     ("2020-05", "15min", 5 * 24 * 4, "2020-05-01 00:15", 15 / 60),
#     ("2020-05", "h", 5 * 24, "2020-05-01 01:00", 1),
#     ("2020-05", "D", 5, "2020-05-02", 24),
#     ("2020-05", "MS", 3, "2020-06", [31 * 24, 30 * 24, 31 * 24]),
#     ("2020-05", "QS-FEB", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
#     ("2020-05", "QS-MAY", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
#     ("2020-05", "QS-AUG", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
#     ("2020-05", "QS-NOV", 3, "2020-08", [92 * 24, 92 * 24, 92 * 24]),
#     ("2020-05", "YS-MAY", 3, "2021-05", [8760, 8760, 8760]),
#     ("2020-04-21 15:00", "min", 5 * 24 * 60, "2020-04-21 15:01", 1 / 60),
#     ("2020-04-21 15:00", "5min", 5 * 24 * 12, "2020-04-21 15:05", 5 / 60),
#     ("2020-04-21 15:00", "15min", 5 * 24 * 4, "2020-04-21 15:15", 15 / 60),
#     ("2020-04-21 15:00", "h", 5 * 24, "2020-04-21 16:00", 1),
# ]
