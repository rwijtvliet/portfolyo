import functools
from portfolyo.prices import convert
from portfolyo.tools import nits
from portfolyo import testing
from pathlib import Path
import numpy as np
import pandas as pd
import pytest


@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
@pytest.mark.parametrize("withunit", [True, False])
@pytest.mark.parametrize(
    ("b", "p", "o", "o_EuropeBerlin", "ts_left", "freq"),
    [
        (100, 100, 100, None, "2020-01-01", "MS"),  # 31 days, 23 working days
        (100, 200, 41.02564103, None, "2020-01-01", "MS"),
        (100, 300, -17.94871795, None, "2020-01-01", "MS"),
        (100, 100, 100, None, "2020-01-01", "QS"),  # 91 days, 65 working days
        (100, 200, 44.44444444, 44.40484676, "2020-01-01", "QS"),
        (100, 300, -11.11111111, -11.19030649, "2020-01-01", "QS"),
        (100, 100, 100, None, "2020-01-01", "D"),  # weekday
        (100, 200, 0, None, "2020-01-01", "D"),  # weekday
        (100, 300, -100, None, "2020-01-01", "D"),  # weekday
        (100, np.nan, 100, None, "2020-01-04", "D"),  # weekend only
    ],
)
def test_pbaseppeakpoffpeak_explicit(
    b: float,
    p: float,
    o: float,
    ts_left: str,
    freq: str,
    withunit: bool,
    tz: str,
    o_EuropeBerlin: float,
):
    """Test if base, peak and offpeak values can be calculated from single values."""
    # Handle timezone.
    ts_left = pd.Timestamp(ts_left, tz=tz)
    if tz is not None and o_EuropeBerlin is not None:
        o = o_EuropeBerlin

    # Handle units.
    if withunit:  # add a (random) unit to see if conversion still works.
        b, p, o = nits.Q_(b, "MW"), nits.Q_(p, "MW"), nits.Q_(o, "MW")

    # Do testing.
    assert np.isclose(convert.peak(b, o, ts_left, freq), p, equal_nan=True)
    if np.isnan(p):
        p = 0 if not withunit else nits.Q_(0, "MW")
    assert np.isclose(convert.offpeak(b, p, ts_left, freq), o)
    assert np.isclose(convert.base(p, o, ts_left, freq), b)


@pytest.mark.parametrize("withunits", [True, False])
@pytest.mark.parametrize("testcol", ["base", "peak", "offpeak"])
@pytest.mark.parametrize(
    "bpoframe",
    [
        pd.DataFrame(
            {
                "peak": [100.0, 100, 100, 100],
                "base": [80.0, 80, 80, 80],
                "offpeak": [68.2051282, 69.4736842, 68.9770355, 68.421053],
            },
            pd.date_range("2020", periods=4, freq="MS", tz="Europe/Berlin"),
        ),
        pd.DataFrame(
            {
                "peak": [100.0, 100, 100, 100],
                "base": [80.0, 80, 80, 80],
                "offpeak": [68.8510638, 68.8699360, 68.9361702, 68.9361702],
            },
            pd.date_range("2020", periods=4, freq="AS", tz="Europe/Berlin"),
        ),
    ],
)
def test_completebpoframe_explicit(bpoframe, testcol: str, withunits: bool):
    """Test if missing column can be reconstructed."""
    if withunits:
        bpoframe = bpoframe.astype("pint[Eur/MWh]")
    df = bpoframe.drop(columns=testcol)
    result = convert.complete_bpoframe(df)
    testing.assert_frame_equal(bpoframe, result)


@functools.lru_cache()
def get_df_fromexcel(tz, aggfreq) -> pd.DataFrame:
    path = Path(__file__).parent / "test_convert_data.xlsx"
    sheetname = f'{aggfreq}_{"None" if tz is None else tz.replace("/", "")}'
    df = pd.read_excel(path, sheetname, header=6, index_col=0)
    df = df.tz_localize(tz, ambiguous="infer")
    df.index.freq = aggfreq
    return df


@pytest.mark.parametrize("withunit", [True, False])
@pytest.mark.parametrize("aggfreq", ["MS", "QS", "AS"])
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_pbaseppeakpoffpeak_fromexcel(tz: str, aggfreq: str, withunit: bool):
    """Test if base, peak and offpeak value for a period can be calculated from the other two."""

    # Pick random row.
    row = get_df_fromexcel(tz, aggfreq).sample().iloc[0, :]
    ts_left, b, p, o = row.name, row.base, row.peak, row.offpeak

    # Adjust input values.
    if withunit:
        b, p, o = nits.Q_(b, "MW"), nits.Q_(p, "MW"), nits.Q_(o, "MW")

    # Get result and test.
    assert np.isclose(convert.peak(b, o, ts_left, aggfreq), p)
    assert np.isclose(convert.offpeak(b, p, ts_left, aggfreq), o)
    assert np.isclose(convert.base(p, o, ts_left, aggfreq), b)


@pytest.mark.parametrize("aggfreq", ["MS", "QS", "AS"])
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_completebpoframe_fromexcel(tz: str, aggfreq: str):
    """Test if a partial bpoframe can be completed to a full bpoframe."""
    bpoframe = get_df_fromexcel(tz, aggfreq)[["base", "peak", "offpeak"]]

    for key in bpoframe:
        partial = bpoframe.drop(columns=key)
        bpoframe_result = convert.complete_bpoframe(partial)
        testing.assert_frame_equal(bpoframe_result, bpoframe)


@pytest.mark.parametrize("aggfreq", ["MS", "QS", "AS"])
@pytest.mark.parametrize("freq", ["15T", "H"])
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_tseries2singlebpo_fromexcel(tz, freq, aggfreq):
    """Test if a timeseries can be converted into single base, peak and offpeak values."""
    tseries = get_df_fromexcel(tz, freq)["var"]
    bpoframe = get_df_fromexcel(tz, aggfreq)[["base", "peak", "offpeak"]]

    ts = np.random.choice(bpoframe.index)
    values_expected = bpoframe.loc[ts, :]

    s_source = tseries[(tseries.index >= ts) & (tseries.index.ts_right < ts.ts_right)]
    values_result = convert.tseries2singlebpo(s_source)

    for key in ["base", "peak", "offpeak"]:
        assert np.isclose(values_result[key], values_expected[key])


@pytest.mark.parametrize("aggfreq", ["MS", "QS", "AS"])
@pytest.mark.parametrize("freq", ["15T", "H"])
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_tseries2bpoframe_fromexcel(tz, freq, aggfreq):
    """Test if a timeseries (i.e., long) can be converted into a bpo-frame (i.e., wide)."""
    tseries = get_df_fromexcel(tz, freq)["var"]
    bpoframe_result = convert.tseries2bpoframe(tseries, aggfreq)

    bpoframe_expected = get_df_fromexcel(tz, aggfreq)[["base", "peak", "offpeak"]]

    testing.assert_frame_equal(bpoframe_result, bpoframe_expected)


@pytest.mark.parametrize("aggfreq", ["MS", "QS", "AS"])
@pytest.mark.parametrize("freq", ["15T", "H"])
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_bpoframe2timeseries_fromexcel(tz, freq, aggfreq, drop):
    """Test if a bpoframe (i.e., wide) can be converted into a timeseries (i.e., long)."""
    bpoframe = get_df_fromexcel(tz, aggfreq)[["base", "peak", "offpeak"]]
    tseries_result = convert.bpoframe2tseries(bpoframe, freq)

    tseries_expected = get_df_fromexcel(tz, freq)[f"{aggfreq}_TRUE"]
    testing.assert_series_equal(tseries_result, tseries_expected)


@pytest.mark.parametrize(
    ("short_aggfreq", "long_aggfreq"),
    [
        ("MS", "MS"),
        ("MS", "QS"),
        ("MS", "AS"),
        ("QS", "QS"),
        ("QS", "AS"),
        ("AS", "AS"),
    ],
)
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_bpoframe2bpoframe_fromexcel(tz, short_aggfreq, long_aggfreq):
    """Test if a bpoframe with a short frequency (e.g., months) can correctly be
    downsampled, to a bpoframe with a longer frequency (e.g., quarters)."""

    bpoframe_source = get_df_fromexcel(tz, short_aggfreq)[["base", "peak", "offpeak"]]
    bpoframe_result = convert.bpoframe2bpoframe(bpoframe_source, long_aggfreq)

    bpoframe_expected = get_df_fromexcel(tz, long_aggfreq)[["base", "peak", "offpeak"]]
    testing.assert_frame_equal(bpoframe_result, bpoframe_expected)


@pytest.mark.parametrize("po", [True, False])
@pytest.mark.parametrize(
    ("short_aggfreq", "long_aggfreq"),
    [
        ("MS", "MS"),
        ("MS", "QS"),
        ("MS", "AS"),
        ("QS", "QS"),
        ("QS", "AS"),
        ("AS", "AS"),
    ],
)
@pytest.mark.parametrize("freq", ["15T", "H"])
@pytest.mark.parametrize("tz", [None, "Europe/Berlin"])
def test_tseries2tseries_fromexcel(tz, freq, short_aggfreq, long_aggfreq, po):
    """Test if a (e.g., hourly) timeseries with a short aggregation frequency (e.g., months)
    can correctly be converted into another hourly timeseries with a longer aggregation
    frequency (e.g., quarters)."""
    tseries_source = get_df_fromexcel(tz, freq)[f"{short_aggfreq}_{str(po).upper()}"]
    tseries_result = convert.tseries2tseries(tseries_source, long_aggfreq)

    tseries_expected = get_df_fromexcel(tz, freq)[f"{long_aggfreq}_{str(po).upper()}"]
    testing.assert_series_equal(tseries_result, tseries_expected, check_names=False)
